// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package main

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_MessageType int32

const (
	PROPOSE  Message_MessageType = 0
	PREPARE  Message_MessageType = 1
	PROMISE  Message_MessageType = 2
	ACCEPT   Message_MessageType = 3
	ADD_NODE Message_MessageType = 4
	DONE     Message_MessageType = 5
)

var Message_MessageType_name = map[int32]string{
	0: "PROPOSE",
	1: "PREPARE",
	2: "PROMISE",
	3: "ACCEPT",
	4: "ADD_NODE",
	5: "DONE",
}

var Message_MessageType_value = map[string]int32{
	"PROPOSE":  0,
	"PREPARE":  1,
	"PROMISE":  2,
	"ACCEPT":   3,
	"ADD_NODE": 4,
	"DONE":     5,
}

func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

type Message_NodeType int32

const (
	CLIENT   Message_NodeType = 0
	PROPOSER Message_NodeType = 1
	ACCEPTOR Message_NodeType = 2
	LEARNER  Message_NodeType = 4
)

var Message_NodeType_name = map[int32]string{
	0: "CLIENT",
	1: "PROPOSER",
	2: "ACCEPTOR",
	4: "LEARNER",
}

var Message_NodeType_value = map[string]int32{
	"CLIENT":   0,
	"PROPOSER": 1,
	"ACCEPTOR": 2,
	"LEARNER":  4,
}

func (Message_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 1}
}

type Message struct {
	MessageType Message_MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=paxos.Message_MessageType" json:"messageType,omitempty"`
	Sender      int32               `protobuf:"varint,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Id          int32               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Value       int32               `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	NodeType    Message_NodeType    `protobuf:"varint,5,opt,name=nodeType,proto3,enum=paxos.Message_NodeType" json:"nodeType,omitempty"`
	Address     string              `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessageType() Message_MessageType {
	if m != nil {
		return m.MessageType
	}
	return PROPOSE
}

func (m *Message) GetSender() int32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Message) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Message) GetNodeType() Message_NodeType {
	if m != nil {
		return m.NodeType
	}
	return CLIENT
}

func (m *Message) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("paxos.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
	proto.RegisterEnum("paxos.Message_NodeType", Message_NodeType_name, Message_NodeType_value)
	proto.RegisterType((*Message)(nil), "paxos.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x31, 0x4b, 0xf3, 0x40,
	0x18, 0xc7, 0xef, 0xd2, 0x24, 0xcd, 0xfb, 0xf4, 0xb5, 0x1c, 0x87, 0x68, 0x70, 0x38, 0x4a, 0xa7,
	0x4e, 0x1d, 0xec, 0x26, 0x82, 0xc4, 0xe6, 0x86, 0x42, 0x9b, 0x84, 0x6b, 0x07, 0x71, 0x91, 0x48,
	0x0e, 0x29, 0xd8, 0xa6, 0x34, 0x2a, 0xba, 0xf9, 0x11, 0xfc, 0x18, 0x7e, 0x14, 0xc7, 0x8e, 0x1d,
	0xed, 0x75, 0x71, 0xb3, 0x1f, 0x41, 0x72, 0x49, 0xa4, 0x38, 0x1d, 0xff, 0xe7, 0xff, 0xbb, 0xfb,
	0x3d, 0x70, 0x70, 0x30, 0x93, 0x59, 0x16, 0xdf, 0xc9, 0xee, 0x62, 0x99, 0x3e, 0xa4, 0xd4, 0x5a,
	0xc4, 0xcf, 0x69, 0xd6, 0xfe, 0x36, 0xa0, 0x3e, 0x2a, 0x0a, 0x7a, 0x0e, 0x8d, 0x92, 0x99, 0xbc,
	0x2c, 0xa4, 0x8b, 0x5b, 0xb8, 0xd3, 0x3c, 0x3d, 0xe9, 0x6a, 0xb0, 0x5b, 0x42, 0xd5, 0x99, 0x13,
	0x62, 0x1f, 0xa7, 0x47, 0x60, 0x67, 0x72, 0x9e, 0xc8, 0xa5, 0x6b, 0xb4, 0x70, 0xc7, 0x12, 0x65,
	0xa2, 0x4d, 0x30, 0xa6, 0x89, 0x5b, 0xd3, 0x33, 0x63, 0x9a, 0xd0, 0x43, 0xb0, 0x9e, 0xe2, 0xfb,
	0x47, 0xe9, 0x9a, 0x7a, 0x54, 0x04, 0xda, 0x03, 0x67, 0x9e, 0x26, 0x85, 0xd8, 0xd2, 0xe2, 0xe3,
	0x3f, 0xe2, 0xa0, 0xac, 0xc5, 0x2f, 0x48, 0x5d, 0xa8, 0xc7, 0x49, 0xb2, 0x94, 0x59, 0xe6, 0xda,
	0x2d, 0xdc, 0xf9, 0x27, 0xaa, 0xd8, 0xbe, 0x82, 0xc6, 0xde, 0xa2, 0xb4, 0x01, 0xf5, 0x48, 0x84,
	0x51, 0x38, 0xe6, 0x04, 0x15, 0x81, 0x47, 0x9e, 0xe0, 0x04, 0x97, 0xcd, 0x68, 0x30, 0xe6, 0xc4,
	0xa0, 0x00, 0xb6, 0xd7, 0xef, 0xf3, 0x68, 0x42, 0x6a, 0xf4, 0x3f, 0x38, 0x9e, 0xef, 0xdf, 0x04,
	0xa1, 0xcf, 0x89, 0x49, 0x1d, 0x30, 0xfd, 0x30, 0xe0, 0xc4, 0x6a, 0x5f, 0x80, 0x53, 0x6d, 0x92,
	0xf3, 0xfd, 0xe1, 0x80, 0x07, 0x13, 0x82, 0x72, 0xbe, 0x54, 0x08, 0x82, 0xf5, 0x6d, 0xfd, 0x52,
	0x28, 0x88, 0x91, 0x4b, 0x86, 0xdc, 0x13, 0x01, 0x17, 0xc4, 0xbc, 0x3c, 0x5b, 0x6d, 0x18, 0x5a,
	0x6f, 0x18, 0xda, 0x6d, 0x18, 0x7e, 0x55, 0x0c, 0xbf, 0x2b, 0x86, 0x3f, 0x14, 0xc3, 0x2b, 0xc5,
	0xf0, 0xa7, 0x62, 0xf8, 0x4b, 0x31, 0xb4, 0x53, 0x0c, 0xbf, 0x6d, 0x19, 0x5a, 0x6d, 0x19, 0x5a,
	0x6f, 0x19, 0xba, 0x36, 0x67, 0xf1, 0x74, 0x7e, 0x6b, 0xeb, 0xbf, 0xeb, 0xfd, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0xb9, 0xd5, 0xf8, 0xcc, 0x01, 0x00, 0x00,
}

func (x Message_MessageType) String() string {
	s, ok := Message_MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Message_NodeType) String() string {
	s, ok := Message_NodeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.NodeType != that1.NodeType {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&main.Message{")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "NodeType: "+fmt.Sprintf("%#v", this.NodeType)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if m.NodeType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x28
	}
	if m.Value != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Sender != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovMessage(uint64(m.MessageType))
	}
	if m.Sender != 0 {
		n += 1 + sovMessage(uint64(m.Sender))
	}
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovMessage(uint64(m.Value))
	}
	if m.NodeType != 0 {
		n += 1 + sovMessage(uint64(m.NodeType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`NodeType:` + fmt.Sprintf("%v", this.NodeType) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= Message_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= Message_NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
